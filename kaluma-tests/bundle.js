/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var graphics = __webpack_require__(2);

/**
 * ST7735 class
 */
class ST7735 {
  /**
   * Setup ST7735 for SPI connection
   * @param {SPI} spi
   * @param {Object} options
   *   .width {number=128}
   *   .height {number=128}
   *   .dc {number=-1}
   *   .rst {number=-1}
   *   .cs {number=-1}
   *   .rotation {number=0}
   */
  setup (spi, options) {
    this.spi = spi;
    options = Object.assign({
      width: 128,
      height: 128,
      dc: -1,
      rst: -1,
      cs: -1,
      rotation: 0,
      xstart: 2,
      ystart: 3,
    }, this.init, options);
    this.width = options.width;
    this.height = options.height;
    this.dc = options.dc;
    this.rst = options.rst;
    this.cs = options.cs;
    this.rotation = options.rotation;
    this.xstart = options.xstart;
    this.ystart = options.ystart;
    this.context = null;
    if (this.dc > -1) pinMode(this.dc, OUTPUT);
    if (this.rst > -1) pinMode(this.rst, OUTPUT);
    if (this.cs > -1) pinMode(this.cs, OUTPUT);
    // reset
    digitalWrite(this.cs, HIGH);
    digitalWrite(this.rst, LOW);
    delay(10);
    digitalWrite(this.rst, HIGH);
    delay(10);
    digitalWrite(this.cs, LOW);
    this.initR();
  }

  initR () {
    this.cmd(0x01);                         // Software reset
    delay(150);
    this.cmd(0x11);                       // Out of sleep mode
    delay(500);
    // 1st commands
    this.cmd(0xB1, [0x01, 0x2C, 0x2D]); // Framerate ctrl (normal mode): rate = fosc/(1x2+40) * (LINE+2C+2D)
    this.cmd(0xB2, [0x01, 0x2C, 0x2D]); // Framerate ctrl (idle mode): rate = fosc/(1x2+40) * (LINE+2C+2D)
    this.cmd(0xB3, [0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]); // Framerate ctrl (partial mode): [Dot inversion,,, Line inversion,,]
    this.cmd(0xB4, [0x07]);             // Display inversion ctrl: [No inversion]
    this.cmd(0xC0, [0xA2, 0x02, 0x84]); // Power ctrl: [-4.6V,, Auto mode]
    this.cmd(0xC1, [0xC5]);             // Power ctrl: [VGH25=2.4C VGSEL=-10 VGH=3 * AVDD]
    this.cmd(0xC2, [0x0A, 0x00]);       // Power ctrl: [Opamp current small, Boost frequency]
    this.cmd(0xC3, [0x8A, 0x2A]);       // Power ctrl: [BCLK/2, opamp current small & medium low]
    this.cmd(0xC4, [0x8A, 0xEE]);       // Power ctrl
    this.cmd(0xC5, [0x0E]);             // Power ctrl
    this.cmd(0x20);                     // Don't invert display
    this.cmd(0x36, [0xC8]);             // Mem access ctrl: [row/col addr bottom-top refresh]
    this.cmd(0x3A, [0x05]);             // Set color mode: [16-bit color]
    // 2nd commands (init based on display types)
    // Init 7735R
    this.cmd(0x2A, [0x00, 0x00, 0x00, this.width - 1]); // Column addr set: XSTART=0, XEND=width
    this.cmd(0x2B, [0x00, 0x00, 0x00, this.height - 1]); // Row addr set: YSTART=0, YEND=height
    // 3rd commands
    this.cmd(0xE0,             // Gamma adjustments (pos. polarity)
      [0x02, 0x1c, 0x07, 0x12,
       0x37, 0x32, 0x29, 0x2d,
       0x29, 0x25, 0x2B, 0x39,
       0x00, 0x01, 0x03, 0x10]); 
    this.cmd(0xE1,             // Gamma adjustments (neg. polarity)
      [0x03, 0x1d, 0x07, 0x06,
       0x2E, 0x2C, 0x29, 0x2D,
       0x2E, 0x2E, 0x37, 0x3F,
       0x00, 0x00, 0x02, 0x10]);
    this.cmd(0x13);            // Normal display on
    delay(10);
    this.cmd(0x29);          // Main screen turn on
    delay(100);
    // this.cmd(0x36, [0x40 | 0x80 | 0x08]); // Mem access ctrl: ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST7735_MADCTL_BGR;
  }

  /**
   * Send command
   * @param {number} cmd
   * @param {Array<number>} data
   */
  cmd (cmd, data) {
    digitalWrite(this.dc, LOW); // command
    this.spi.send(new Uint8Array([cmd]));
    digitalWrite(this.dc, HIGH); // data
    if (data) this.spi.send(new Uint8Array(data));
  }
  
  /**
   * Get a graphic context
   * @param {string} type Type of graphic context.
   *     'buffer' or 'callback'. Default is 'callback'
   */
  getContext (type) {
	if (!this.context) {
      if (type === 'buffer') {
        this.context = new graphics.BufferedGraphicsContext(this.width, this.height, {
          rotation: this.rotation,
          bpp: 16,
          display: (buffer) => {
            digitalWrite(this.cs, LOW); // select
            this.cmd(0x2A, [0, this.xstart, 0, this.width - 1 + this.xstart]); // column addr set
            this.cmd(0x2B, [0, this.ystart, 0, this.height - 1 + this.ystart]); // row addr set
            this.cmd(0x2C, buffer); // write to RAM
            digitalWrite(this.cs, HIGH); // deselect
          }
        });
      } else { // 'callback'
        this.context = new graphics.GraphicsContext(this.width, this.height, {
          rotation: this.rotation,
          setPixel: (x, y, c) => {
            digitalWrite(this.cs, LOW); // select
            this.cmd(0x2A, [0, x + this.xstart, 0, x + 1 + this.xstart]); // column addr set
            this.cmd(0x2B, [0, y + this.ystart, 0, y + 1 + this.ystart]); // row addr set
            this.cmd(0x2C, [c>>8, c]); // write to RAM
            digitalWrite(this.cs, HIGH); // deselect
          },
          fillRect: (x, y, w, h, c) => {
            digitalWrite(this.cs, LOW); // select
            this.cmd(0x2A, [0, x + this.xstart, 0, x + w - 1 + this.xstart]); // column addr set
            this.cmd(0x2B, [0, y + this.ystart, 0, y + h - 1 + this.ystart]); // row addr set
            this.cmd(0x2C); // write to RAM
            this.spi.send(new Uint8Array([c>>8, c]), 5000, w * h);
            digitalWrite(this.cs, HIGH); // deselect
          }
        });
      }
    }
    return this.context;
  }
}

exports.ST7735 = ST7735;


/***/ }),
/* 2 */
/***/ ((module) => {

"use strict";
module.exports = require("graphics");

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// echo ./index.js | entr -s "kaluma flash ./index.js --bundle"

const { ST7735 } = __webpack_require__(1);
const st7735 = new ST7735();
  
const fillImage = (function(x, y, w, h, buf) {
  digitalWrite(this.cs, LOW); // select
  this.cmd(0x2A, [0, x + this.xstart, 0, x + w - 1 + this.xstart]); // column addr set
  this.cmd(0x2B, [0, y + this.ystart, 0, y + h - 1 + this.ystart]); // row addr set
  this.cmd(0x2C); // write to RAM
  this.spi.send(buf);
  digitalWrite(this.cs, HIGH); // deselect
}).bind(st7735);

const A = 0;
const B = 3;
const UP = 13;
const DOWN = 12;
const LEFT = 11;
const RIGHT = 10;

const led = pinMode(25, OUTPUT);

let size = 10;


digitalToggle(25)

pinMode(A, INPUT_PULLUP);

setWatch(
  function () {
    digitalToggle(25); // Set the pin 1 to HIGH.
    size += 10;
    // if (size === 80 || size === 0) delta *= -1;
  },
  A,
  FALLING,
  // 5
); 

var options = { // ST7735R 1.8"
  width: 128,
  height: 160,
  xstart: 0,
  ystart: 0,
  dc: 16,
  rst: 17,
  cs: 18
}

const spiOptions = {
  sck: 10,
  mosi: 11,
  baudrate: 30000000 // default: 3000000
}

const spi = board.spi(1, spiOptions);

st7735.setup(spi, options);
const gc = st7735.getContext("buffer");

const bkr = (() => {
  const pixels = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[233,181,81,255],[240,169,81,255],[225,167,54,255],[222,177,36,255],[232,175,47,255],[230,162,47,255],[224,160,54,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[239,175,99,255],[247,166,93,255],[249,162,95,255],[245,134,69,255],[241,129,49,255],[236,136,45,255],[242,131,51,255],[241,116,48,255],[231,133,52,255],[226,184,28,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[250,176,93,255],[237,140,77,255],[248,143,70,255],[243,102,38,255],[246,89,27,255],[246,81,19,255],[239,76,16,255],[243,80,22,255],[246,90,35,255],[239,116,53,255],[223,141,46,255],[225,168,41,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[240,133,63,255],[240,113,46,255],[239,92,30,255],[227,60,12,255],[230,40,4,255],[240,47,8,255],[236,51,5,255],[245,67,15,255],[246,82,26,255],[248,102,44,255],[236,111,51,255],[229,130,55,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[224,131,50,255],[228,87,23,255],[215,46,6,255],[230,60,24,255],[228,36,9,255],[233,30,7,255],[236,35,8,255],[234,37,5,255],[234,47,5,255],[240,69,17,255],[238,80,26,255],[224,86,30,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[222,92,25,255],[216,54,14,255],[212,40,2,255],[241,64,26,255],[242,47,18,255],[247,51,14,255],[243,52,11,255],[235,47,7,255],[237,59,15,255],[230,63,11,255],[211,55,9,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[219,120,43,255],[182,33,4,255],[191,28,4,255],[221,52,21,255],[230,33,10,255],[240,38,10,255],[239,47,16,255],[245,69,42,255],[219,46,27,255],[203,42,6,255],[224,99,42,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[219,201,211,255],[234,245,246,255],[238,218,215,255],[237,165,159,255],[245,199,200,255],[241,239,245,255],[242,217,218,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[186,199,199,255],[205,226,228,255],[232,248,249,255],[216,221,220,255],[198,204,205,255],[209,229,231,255],[227,247,245,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[128,130,124,255],[67,69,69,255],[182,188,184,255],[182,182,177,255],[168,163,158,255],[81,86,84,255],[154,173,177,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[140,112,98,255],[152,127,112,255],[197,154,125,255],[183,121,84,255],[158,108,83,255],[156,134,125,255],[172,167,167,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[171,98,71,255],[196,120,81,255],[246,155,97,255],[249,151,86,255],[208,119,63,255],[173,105,84,255],[213,161,156,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[182,107,80,255],[218,130,76,255],[229,124,59,255],[239,132,67,255],[242,140,75,255],[226,143,114,255],[229,164,156,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[178,104,75,255],[201,113,55,255],[196,92,30,255],[218,114,51,255],[227,127,63,255],[205,122,90,255],[219,155,143,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[182,115,90,255],[170,89,46,255],[162,67,12,255],[170,78,23,255],[195,109,63,255],[214,137,114,255],[225,160,148,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[171,104,82,255],[164,88,63,255],[173,92,66,255],[193,115,91,255],[217,142,125,255],[235,162,149,255],[228,162,151,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[168,102,79,255],[168,93,74,255],[179,106,90,255],[207,133,121,255],[227,154,144,255],[237,166,155,255],[226,161,150,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[166,96,75,255],[174,99,83,255],[184,111,95,255],[208,134,121,255],[228,151,140,255],[234,161,149,255],[233,167,156,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[166,96,77,255],[171,97,81,255],[185,112,96,255],[209,132,120,255],[218,140,126,255],[237,159,147,255],[241,174,160,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[103,82,53,255],[160,98,84,255],[158,93,76,255],[170,105,94,255],[189,119,110,255],[215,144,134,255],[222,155,146,255],[224,165,157,255],[186,179,108,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[120,138,132,255],[121,138,136,255],[115,138,135,255],[117,140,139,255],[94,106,100,255],[100,99,91,255],[110,115,110,255],[148,173,179,255],[133,169,170,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[130,145,138,255],[99,119,115,255],[101,125,123,255],[86,108,106,255],[24,51,44,255],[4,49,40,255],[8,52,45,255],[102,136,144,255],[130,170,172,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[118,139,121,255],[86,113,109,255],[128,155,156,255],[95,120,120,255],[38,56,51,255],[14,42,35,255],[4,43,39,255],[92,126,135,255],[127,168,168,255],[178,211,141,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[181,193,141,255],[142,168,140,255],[102,132,125,255],[144,175,177,255],[97,127,124,255],[50,73,67,255],[17,41,33,255],[4,38,37,255],[80,115,123,255],[157,201,187,255],[180,223,185,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[154,179,140,255],[168,199,169,255],[135,166,146,255],[92,120,124,255],[90,122,116,255],[25,51,44,255],[1,21,13,255],[1,30,24,255],[68,106,105,255],[169,214,192,255],[187,234,204,255],[203,236,199,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[124,149,111,255],[128,157,125,255],[85,120,95,255],[118,151,132,255],[58,83,79,255],[6,17,12,255],[1,8,4,255],[0,21,13,255],[114,153,138,255],[182,225,196,255],[125,164,134,255],[152,194,166,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[117,133,102,255],[164,197,168,255],[139,175,144,255],[143,180,148,255],[38,59,45,255],[3,12,6,255],[3,20,13,255],[1,27,19,255],[133,173,150,255],[165,205,177,255],[152,190,161,255],[149,189,162,255],[183,220,186,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[177,182,116,255],[123,140,115,255],[183,220,185,255],[168,205,172,255],[169,205,172,255],[102,129,103,255],[2,14,10,255],[2,23,16,255],[4,35,27,255],[144,183,161,255],[173,213,184,255],[185,224,197,255],[154,190,162,255],[149,187,161,255],[186,225,185,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[169,178,133,255],[136,154,125,255],[170,204,170,255],[162,195,167,255],[170,204,172,255],[134,163,134,255],[35,48,34,255],[0,17,10,255],[85,115,104,255],[181,219,194,255],[186,226,195,255],[159,198,169,255],[148,184,156,255],[138,160,137,255],[188,228,202,255],[182,218,180,255],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]];
  const bytes = new Uint8Array(32*32*2);
  for (let x = 0; x < 32; x++)
    for (let y = 0; y < 32; y++) {
      const [r, g, b, a] = pixels[y*32 + x];
      if (a < 255) continue;
      const col = gc.color16(b, g, r);
      bytes[(y*32 + x)*2+0] = col >> 8;
      bytes[(y*32 + x)*2+1] = col;
    }
  return new Uint16Array(bytes.buffer);
})();
  
const { width: w, height: h } = options;
const screen = new Uint16Array(w*h);
  
let x = 0;
setInterval(() => {
  fillImage(0, 0, w, h, new Uint8Array(screen.buffer));
 
  Object(function webpackMissingModule() { var e = new Error("Cannot find module 'native'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(bkr, 32, 32, screen, 0, Math.floor((Math.sin(x++)+1)/2 * 10));
}, 1000/20);

})();

/******/ })()
;